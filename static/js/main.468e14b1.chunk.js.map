{"version":3,"sources":["timeUtils.ts","App.tsx","cookieUtils.ts","reportWebVitals.ts","index.tsx"],"names":["generateCountdown","duration","Date","parse","now","milliseconds","seconds","Math","floor","minutes","hours","days","hoursString","minutesString","secondsString","millisecondsString","toString","App","useState","cname","name","ca","decodeURIComponent","document","cookie","split","i","length","c","charAt","substring","indexOf","getCookie","isClockedIn","setIsClockedIn","countdown","setCountdown","useEffect","setInterval","cvalue","exdays","d","setTime","getTime","expires","toUTCString","setCookie","className","Button","variant","color","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"uNAAO,SAASA,IACd,IAAMC,EAAWC,KAAKC,MAAM,4BAA8BD,KAAKE,MACzDC,EAAeJ,EAAW,IAC1BK,EAAUC,KAAKC,MAAOP,EAAW,IAAQ,IACzCQ,EAAUF,KAAKC,MAAOP,EAAQ,IAAkB,IAChDS,EAAQH,KAAKC,MAAOP,EAAQ,KAAuB,IACnDU,EAAOJ,KAAKC,MAAMP,EAAQ,OAE1BW,EAAcF,EAAQ,GAAR,WAAiBA,GAAUA,EACzCG,EAAgBJ,EAAU,GAAK,IAAMA,EAAUA,EAC/CK,EAAgBR,EAAU,GAAK,IAAMA,EAAUA,EACjDS,EAAqBV,EAAaW,WAOtC,OANIX,EAAe,GACjBU,EAAqB,KAAOV,EACnBA,EAAe,MACxBU,EAAqB,IAAMV,GAI3BM,EACA,IACAC,EACA,IACAC,EACA,IACAC,EACA,IACAC,E,WCiBWE,MAtCf,WAAgB,IAAD,EACyBC,mBACP,SCR1B,SAAmBC,GAItB,IAHA,IAAIC,EAAOD,EAAQ,IAEfE,EADgBC,mBAAmBC,SAASC,QACzBC,MAAM,KACrBC,EAAI,EAAGA,EAAGL,EAAGM,OAAQD,IAAK,CAEhC,IADA,IAAIE,EAAIP,EAAGK,GACY,MAAhBE,EAAEC,OAAO,IACdD,EAAIA,EAAEE,UAAU,GAElB,GAAwB,IAApBF,EAAEG,QAAQX,GACZ,OAAOQ,EAAEE,UAAUV,EAAKO,OAAQC,EAAED,QAGtC,MAAO,GDLPK,CAAU,gBAFC,mBACNC,EADM,KACOC,EADP,OAKqBhB,mBAASlB,KAL9B,mBAKNmC,EALM,KAKKC,EALL,KAwBb,OAjBAC,qBAAU,WACRC,aAAY,WACVF,EAAapC,OACZ,MACF,IAEHqC,qBACE,YCJK,SAAmBlB,EAAeoB,EAAgBC,GACvD,IAAIC,EAAI,IAAIvC,KACZuC,EAAEC,QAAQD,EAAEE,UAAoB,GAAPH,EAAU,GAAG,GAAG,KACzC,IAAII,EAAU,WAAYH,EAAEI,cAC5BtB,SAASC,OAASL,EAAQ,IAAMoB,EAAS,IAAMK,EAAU,UDCvDE,CAAU,cAAeb,EAAYjB,WAAY,KAEnD,CAACiB,IAQD,sBAAKc,UAAU,MAAf,UACE,kEAAqCZ,EAArC,OACA,cAACa,EAAA,EAAD,CACEC,QAAQ,YACRC,MAAOjB,EAAc,YAAc,UACnCkB,QAVN,WACEjB,GAAgBD,IAMd,yBAKYA,EAAc,MAAQ,YExBzBmB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFxC,SAASyC,eAAe,SAM1BZ,M","file":"static/js/main.468e14b1.chunk.js","sourcesContent":["export function generateCountdown() {\n  const duration = Date.parse(\"27 May 2021 00:15:00 MST\") - Date.now();\n  const milliseconds = duration % 1000;\n  const seconds = Math.floor((duration / 1000) % 60);\n  const minutes = Math.floor((duration / (1000 * 60)) % 60);\n  const hours = Math.floor((duration / (1000 * 60 * 60)) % 24);\n  const days = Math.floor(duration / (1000 * 60 * 60 * 24));\n\n  const hoursString = hours < 10 ? `0${hours}` : hours;\n  const minutesString = minutes < 10 ? \"0\" + minutes : minutes;\n  const secondsString = seconds < 10 ? \"0\" + seconds : seconds;\n  let millisecondsString = milliseconds.toString();\n  if (milliseconds < 10) {\n    millisecondsString = \"00\" + milliseconds;\n  } else if (milliseconds < 100) {\n    millisecondsString = \"0\" + milliseconds;\n  }\n\n  return (\n    days +\n    \":\" +\n    hoursString +\n    \":\" +\n    minutesString +\n    \":\" +\n    secondsString +\n    \".\" +\n    millisecondsString\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { Button } from \"@material-ui/core\";\nimport \"./App.css\";\nimport { getCookie, setCookie } from \"./cookieUtils\";\nimport { generateCountdown } from \"./timeUtils\";\n\nfunction App() {\n  const [isClockedIn, setIsClockedIn] = useState(\n    getCookie(\"isClockedIn\") === \"true\"\n  );\n\n  const [countdown, setCountdown] = useState(generateCountdown());\n\n  useEffect(function () {\n    setInterval(function () {\n      setCountdown(generateCountdown());\n    }, 10);\n  }, []);\n\n  useEffect(\n    function () {\n      setCookie(\"isClockedIn\", isClockedIn.toString(), 1);\n    },\n    [isClockedIn]\n  );\n\n  function handleClick() {\n    setIsClockedIn(!isClockedIn);\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Operation Malarkey Commences In {countdown}!</h1>\n      <Button\n        variant=\"contained\"\n        color={isClockedIn ? \"secondary\" : \"primary\"}\n        onClick={handleClick}\n      >\n        {`Clock ${isClockedIn ? \"Out\" : \"In\"}`}\n      </Button>\n    </div>\n  );\n}\n\nexport default App;\n","export function getCookie(cname: string) {\n    var name = cname + \"=\";\n    var decodedCookie = decodeURIComponent(document.cookie);\n    var ca = decodedCookie.split(';');\n    for(var i = 0; i <ca.length; i++) {\n      var c = ca[i];\n      while (c.charAt(0) === ' ') {\n        c = c.substring(1);\n      }\n      if (c.indexOf(name) === 0) {\n        return c.substring(name.length, c.length);\n      }\n    }\n    return \"\";\n  }\n\n  export function setCookie(cname: string, cvalue: string, exdays: number) {\n    var d = new Date();\n    d.setTime(d.getTime() + (exdays*24*60*60*1000));\n    var expires = \"expires=\"+ d.toUTCString();\n    document.cookie = cname + \"=\" + cvalue + \";\" + expires + \";path=/\";\n  }","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}